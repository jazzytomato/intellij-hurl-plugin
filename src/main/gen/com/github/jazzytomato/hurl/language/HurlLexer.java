// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Hurl.flex

package com.github.jazzytomato.hurl.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.github.jazzytomato.hurl.language.psi.HurlTypes;
import com.intellij.psi.TokenType;


class HurlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\0\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\2\24"+
    "\6\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\3\46"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\46"+
    "\1\73\1\74\1\75\1\46\1\76\1\77\1\100\1\46"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\46\1\107"+
    "\1\110\1\111\1\112\3\46\1\113\1\46\1\114\1\115"+
    "\1\116\1\117\6\0\1\120\32\0\1\121\u01df\0\1\121"+
    "\177\0\13\121\35\0\2\120\5\0\1\121\57\0\1\121"+
    "\240\0\1\121\377\0\u0100\122";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\14\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\2\32\1\41\1\42\1\43\1\44\1\0\1\45"+
    "\1\0\1\22\1\46\1\22\1\0\1\46\1\0\1\47"+
    "\1\50\2\32\1\22\15\32\11\0\2\32\1\0\1\51"+
    "\1\22\2\32\1\52\11\32\11\0\1\53\2\32\2\0"+
    "\2\32\1\54\4\32\11\0\1\32\1\55\2\0\1\56"+
    "\1\32\1\0\2\32\12\0\1\32\1\56\3\0\1\54"+
    "\1\0\2\32\25\0\1\57\12\0\1\57\1\0\1\60"+
    "\2\0\1\61\1\0\1\62\1\0\1\63\1\0\1\57"+
    "\3\0\1\64\5\0\1\65\4\0\1\57\1\66\2\0"+
    "\2\57\2\0\2\57\10\0\1\57\2\0\2\57\2\0"+
    "\2\57\1\67\1\70\5\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\123\0\246\0\371\0\123\0\u014c\0\u019f\0\123"+
    "\0\123\0\123\0\123\0\123\0\123\0\u01f2\0\123\0\u0245"+
    "\0\123\0\123\0\u0298\0\123\0\123\0\u02eb\0\123\0\u033e"+
    "\0\123\0\123\0\u0391\0\u03e4\0\u0437\0\u048a\0\u04dd\0\u0530"+
    "\0\u0583\0\u05d6\0\u0629\0\u067c\0\u06cf\0\u0722\0\u0775\0\123"+
    "\0\123\0\123\0\u07c8\0\u081b\0\u086e\0\u08c1\0\u0914\0\123"+
    "\0\123\0\123\0\u014c\0\u0967\0\u09ba\0\u0a0d\0\u07c8\0\u0a60"+
    "\0\u01f2\0\u0245\0\u0ab3\0\123\0\123\0\u0b06\0\u0b59\0\u0bac"+
    "\0\u0bff\0\u0c52\0\u0ca5\0\u0cf8\0\u0d4b\0\u0d9e\0\u0df1\0\u0e44"+
    "\0\u0e97\0\u0eea\0\u0f3d\0\u0f90\0\u0fe3\0\u1036\0\u1089\0\u10dc"+
    "\0\u112f\0\u1182\0\u11d5\0\u1228\0\u127b\0\u12ce\0\u1321\0\u1374"+
    "\0\u13c7\0\123\0\u0ab3\0\u141a\0\u146d\0\u0391\0\u14c0\0\u1513"+
    "\0\u1566\0\u15b9\0\u160c\0\u165f\0\u16b2\0\u1705\0\u1758\0\u17ab"+
    "\0\u17fe\0\u1851\0\u18a4\0\u18f7\0\u194a\0\u199d\0\u19f0\0\u1a43"+
    "\0\123\0\u1a96\0\u1ae9\0\u1b3c\0\u1b8f\0\u1be2\0\u1c35\0\u1c88"+
    "\0\u1cdb\0\u1d2e\0\u1d81\0\u1dd4\0\u1e27\0\u1e7a\0\u1ecd\0\u1f20"+
    "\0\u1f73\0\u1fc6\0\u2019\0\u206c\0\u20bf\0\u2112\0\u0391\0\u2165"+
    "\0\u21b8\0\u220b\0\u225e\0\u22b1\0\u2304\0\u2357\0\u23aa\0\u23fd"+
    "\0\u2450\0\u24a3\0\u24f6\0\u2549\0\u259c\0\u25ef\0\u2642\0\u2695"+
    "\0\u26e8\0\123\0\u273b\0\u278e\0\u220b\0\123\0\u27e1\0\u2834"+
    "\0\u2887\0\u28da\0\u292d\0\u2980\0\u29d3\0\u2a26\0\u2a79\0\u2acc"+
    "\0\u2b1f\0\u2b72\0\u2bc5\0\u2c18\0\u2c6b\0\u2cbe\0\u2d11\0\u2d64"+
    "\0\u2db7\0\u2e0a\0\u2e5d\0\u2eb0\0\u2f03\0\u2f56\0\u2fa9\0\u2ffc"+
    "\0\u304f\0\u30a2\0\u30f5\0\u3148\0\u319b\0\u31ee\0\u3241\0\u3294"+
    "\0\u32e7\0\u333a\0\u338d\0\123\0\u33e0\0\u3433\0\123\0\u3486"+
    "\0\123\0\u34d9\0\123\0\u352c\0\u357f\0\u35d2\0\u3625\0\u3678"+
    "\0\123\0\u36cb\0\u371e\0\u3771\0\u37c4\0\u3817\0\123\0\u386a"+
    "\0\u38bd\0\u3910\0\u3963\0\u39b6\0\123\0\u3a09\0\u3a5c\0\u3aaf"+
    "\0\u3b02\0\u3b55\0\u3ba8\0\u3bfb\0\u3c4e\0\u3ca1\0\u3cf4\0\u3d47"+
    "\0\u3d9a\0\u3ded\0\u3e40\0\u3e93\0\u3ee6\0\u3f39\0\u3f8c\0\u3fdf"+
    "\0\u4032\0\u4085\0\u40d8\0\u412b\0\u417e\0\u41d1\0\123\0\123"+
    "\0\u4224\0\u4277\0\u42ca\0\u431d\0\u4370";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\4\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\2\33\1\34\1\35\1\36\1\33\1\37"+
    "\1\40\3\33\1\41\2\33\1\42\1\43\3\33\1\44"+
    "\1\45\1\46\1\33\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\3\33\1\36\1\33\1\55\4\33\1\56\7\33"+
    "\1\57\1\60\1\61\1\62\2\3\1\2\124\0\3\3"+
    "\114\0\2\3\2\0\1\3\1\4\1\3\114\0\2\3"+
    "\1\0\5\63\1\64\57\63\1\65\35\63\2\7\2\0"+
    "\114\7\1\0\1\7\23\0\4\66\114\0\1\67\2\0"+
    "\4\70\7\0\27\67\4\0\1\67\1\0\22\67\24\0"+
    "\1\71\1\0\1\72\1\73\1\0\4\23\7\0\4\33"+
    "\1\36\22\33\4\0\1\67\1\0\3\33\1\36\16\33"+
    "\40\0\1\74\122\0\1\75\110\0\1\67\2\0\4\33"+
    "\7\0\27\33\4\0\1\67\1\0\22\33\26\0\1\67"+
    "\2\0\4\33\7\0\16\33\1\76\10\33\4\0\1\67"+
    "\1\0\22\33\26\0\1\67\2\0\4\33\7\0\4\33"+
    "\1\77\22\33\4\0\1\67\1\0\22\33\24\0\1\71"+
    "\1\0\1\72\2\0\4\100\7\0\27\33\4\0\1\67"+
    "\1\0\22\33\26\0\1\67\2\0\4\33\7\0\4\33"+
    "\1\101\22\33\4\0\1\67\1\0\22\33\26\0\1\67"+
    "\2\0\4\33\7\0\4\33\1\102\16\33\1\103\3\33"+
    "\4\0\1\67\1\0\22\33\26\0\1\67\2\0\4\33"+
    "\7\0\10\33\1\104\5\33\1\105\10\33\4\0\1\67"+
    "\1\0\22\33\26\0\1\67\2\0\4\33\7\0\17\33"+
    "\1\106\7\33\4\0\1\67\1\0\22\33\26\0\1\67"+
    "\2\0\4\33\7\0\1\107\15\33\1\110\2\33\1\111"+
    "\2\33\1\112\2\33\4\0\1\67\1\0\22\33\26\0"+
    "\1\67\2\0\4\33\7\0\21\33\1\113\5\33\4\0"+
    "\1\67\1\0\22\33\26\0\1\67\2\0\4\33\7\0"+
    "\15\33\1\114\11\33\4\0\1\67\1\0\22\33\26\0"+
    "\1\67\2\0\4\33\7\0\10\33\1\115\16\33\4\0"+
    "\1\67\1\0\22\33\44\0\1\116\1\117\1\120\2\0"+
    "\1\121\1\0\1\122\4\0\1\123\1\0\1\124\1\0"+
    "\1\125\64\0\1\67\2\0\4\67\7\0\27\67\4\0"+
    "\1\67\1\0\22\67\100\0\1\126\50\0\1\67\2\0"+
    "\4\33\7\0\27\33\4\0\1\67\1\0\17\33\1\127"+
    "\2\33\26\0\1\67\2\0\4\33\7\0\27\33\4\0"+
    "\1\67\1\0\20\33\1\130\1\33\123\0\1\131\34\0"+
    "\1\132\74\0\2\63\2\0\114\63\1\0\1\63\21\0"+
    "\1\73\1\0\4\66\114\0\1\67\1\73\1\0\4\70"+
    "\7\0\27\67\4\0\1\67\1\0\22\67\31\0\4\133"+
    "\114\0\1\67\2\0\4\33\7\0\15\33\1\134\11\33"+
    "\4\0\1\67\1\0\22\33\26\0\1\67\2\0\4\33"+
    "\7\0\13\33\1\135\13\33\4\0\1\67\1\0\22\33"+
    "\26\0\1\67\1\73\1\0\4\100\7\0\27\33\4\0"+
    "\1\67\1\0\22\33\26\0\1\67\2\0\4\33\7\0"+
    "\23\33\1\136\3\33\4\0\1\67\1\0\22\33\26\0"+
    "\1\67\2\0\4\33\7\0\1\137\26\33\4\0\1\67"+
    "\1\0\22\33\26\0\1\67\2\0\4\33\7\0\23\33"+
    "\1\140\3\33\4\0\1\67\1\0\22\33\26\0\1\67"+
    "\2\0\4\33\7\0\15\33\1\141\11\33\4\0\1\67"+
    "\1\0\22\33\26\0\1\67\2\0\4\33\7\0\2\33"+
    "\1\141\24\33\4\0\1\67\1\0\22\33\26\0\1\67"+
    "\2\0\4\33\7\0\23\33\1\142\3\33\4\0\1\67"+
    "\1\0\22\33\26\0\1\67\2\0\4\33\7\0\23\33"+
    "\1\143\3\33\4\0\1\67\1\0\22\33\26\0\1\67"+
    "\2\0\4\33\7\0\22\33\1\101\4\33\4\0\1\67"+
    "\1\0\22\33\26\0\1\67\2\0\4\33\7\0\16\33"+
    "\1\144\10\33\4\0\1\67\1\0\22\33\26\0\1\67"+
    "\2\0\4\33\7\0\21\33\1\145\1\33\1\136\3\33"+
    "\4\0\1\67\1\0\22\33\26\0\1\67\2\0\4\33"+
    "\7\0\1\146\26\33\4\0\1\67\1\0\22\33\26\0"+
    "\1\67\2\0\4\33\7\0\13\33\1\41\13\33\4\0"+
    "\1\67\1\0\22\33\26\0\1\67\2\0\4\33\7\0"+
    "\4\33\1\147\22\33\4\0\1\67\1\0\22\33\117\0"+
    "\1\150\104\0\1\151\122\0\1\152\12\0\1\153\122\0"+
    "\1\154\112\0\1\155\137\0\1\156\116\0\1\157\126\0"+
    "\1\160\101\0\1\161\50\0\1\67\2\0\4\33\7\0"+
    "\27\33\4\0\1\67\1\0\17\33\1\162\2\33\26\0"+
    "\1\67\2\0\4\33\7\0\27\33\4\0\1\67\1\0"+
    "\10\33\1\163\11\33\7\0\2\131\2\164\112\131\1\165"+
    "\1\131\1\164\1\131\1\164\17\0\1\67\2\0\4\33"+
    "\7\0\15\33\1\166\11\33\4\0\1\67\1\0\22\33"+
    "\26\0\1\67\2\0\4\33\7\0\4\33\1\167\22\33"+
    "\4\0\1\67\1\0\22\33\26\0\1\67\2\0\4\33"+
    "\7\0\3\33\1\136\23\33\4\0\1\67\1\0\22\33"+
    "\26\0\1\67\2\0\4\33\7\0\17\33\1\170\7\33"+
    "\4\0\1\67\1\0\22\33\26\0\1\67\2\0\4\33"+
    "\7\0\12\33\1\136\14\33\4\0\1\67\1\0\22\33"+
    "\26\0\1\67\2\0\4\33\7\0\10\33\1\171\16\33"+
    "\4\0\1\67\1\0\22\33\26\0\1\67\2\0\4\33"+
    "\7\0\2\33\1\172\24\33\4\0\1\67\1\0\22\33"+
    "\26\0\1\67\2\0\4\33\7\0\17\33\1\173\7\33"+
    "\4\0\1\67\1\0\22\33\26\0\1\67\2\0\4\33"+
    "\7\0\6\33\1\174\20\33\4\0\1\67\1\0\22\33"+
    "\26\0\1\67\2\0\4\33\7\0\2\33\1\174\24\33"+
    "\4\0\1\67\1\0\22\33\26\0\1\67\2\0\4\33"+
    "\7\0\26\33\1\136\4\0\1\67\1\0\22\33\117\0"+
    "\1\175\122\0\1\176\120\0\1\177\121\0\1\200\124\0"+
    "\1\201\105\0\1\202\132\0\1\203\131\0\1\204\106\0"+
    "\1\205\44\0\1\67\2\0\4\33\7\0\27\33\4\0"+
    "\1\67\1\0\14\33\1\206\5\33\26\0\1\67\2\0"+
    "\4\33\7\0\27\33\4\0\1\67\1\0\10\33\1\207"+
    "\11\33\7\0\116\164\1\210\4\164\2\211\2\0\112\211"+
    "\1\212\1\211\1\0\1\211\20\0\1\67\2\0\4\33"+
    "\7\0\4\33\1\213\22\33\4\0\1\67\1\0\22\33"+
    "\26\0\1\67\2\0\4\33\7\0\23\33\1\174\3\33"+
    "\4\0\1\67\1\0\22\33\26\0\1\67\1\0\1\214"+
    "\4\33\7\0\27\33\4\0\1\67\1\0\22\33\26\0"+
    "\1\67\2\0\4\33\7\0\16\33\1\215\10\33\4\0"+
    "\1\67\1\0\22\33\26\0\1\67\2\0\4\33\7\0"+
    "\7\33\1\136\17\33\4\0\1\67\1\0\22\33\26\0"+
    "\1\67\2\0\4\33\7\0\5\33\1\216\21\33\4\0"+
    "\1\67\1\0\22\33\26\0\1\67\2\0\4\33\7\0"+
    "\4\33\1\136\22\33\4\0\1\67\1\0\22\33\104\0"+
    "\1\217\125\0\1\220\133\0\1\221\112\0\1\222\124\0"+
    "\1\223\113\0\1\224\137\0\1\225\111\0\1\226\131\0"+
    "\1\227\32\0\1\67\2\0\4\33\1\230\6\0\27\33"+
    "\4\0\1\67\1\0\16\33\1\231\3\33\125\0\1\232"+
    "\4\0\2\211\2\0\112\211\1\233\1\211\1\0\1\211"+
    "\1\0\2\211\2\0\73\211\1\234\16\211\1\235\1\211"+
    "\1\0\1\211\20\0\1\67\2\0\4\33\7\0\2\33"+
    "\1\101\24\33\4\0\1\67\1\0\22\33\23\0\1\236"+
    "\6\0\1\237\1\236\115\0\1\67\2\0\4\33\7\0"+
    "\15\33\1\240\11\33\4\0\1\67\1\0\22\33\26\0"+
    "\1\67\2\0\4\33\7\0\10\33\1\241\16\33\4\0"+
    "\1\67\1\0\22\33\116\0\1\242\106\0\1\243\141\0"+
    "\1\244\110\0\1\245\76\0\1\246\143\0\1\247\125\0"+
    "\1\250\127\0\1\251\130\0\1\252\30\0\1\253\120\0"+
    "\1\67\2\0\4\33\1\230\6\0\27\33\4\0\1\67"+
    "\1\0\22\33\7\0\2\211\2\0\112\211\1\235\1\211"+
    "\1\0\1\211\1\0\2\211\2\0\105\211\1\254\4\211"+
    "\1\233\1\211\1\0\1\211\1\0\2\255\2\0\114\255"+
    "\1\0\1\255\20\0\1\67\2\0\4\33\7\0\22\33"+
    "\1\136\4\33\4\0\1\67\1\0\22\33\26\0\1\67"+
    "\2\0\4\33\7\0\15\33\1\137\11\33\4\0\1\67"+
    "\1\0\22\33\120\0\1\256\46\0\1\257\174\0\1\260"+
    "\110\0\1\261\117\0\1\262\137\0\1\263\121\0\1\264"+
    "\120\0\1\265\75\0\1\266\64\0\1\267\101\0\2\211"+
    "\2\0\105\211\1\270\4\211\1\233\1\211\1\0\1\211"+
    "\23\0\2\236\207\0\1\271\124\0\1\272\105\0\1\273"+
    "\135\0\1\274\121\0\1\275\123\0\1\276\104\0\1\277"+
    "\140\0\1\300\123\0\1\301\11\0\1\267\3\0\110\267"+
    "\1\302\6\267\2\211\2\0\102\211\1\303\7\211\1\233"+
    "\1\211\1\0\1\211\67\0\1\304\145\0\1\305\121\0"+
    "\1\306\100\0\1\307\126\0\1\310\116\0\1\311\143\0"+
    "\1\312\101\0\1\313\143\0\1\314\13\0\1\267\3\0"+
    "\110\267\1\315\6\267\2\211\2\0\22\211\1\316\61\211"+
    "\1\317\5\211\1\233\1\211\1\0\1\211\100\0\1\320"+
    "\111\0\1\321\137\0\1\322\130\0\1\323\111\0\1\324"+
    "\22\0\1\315\1\325\2\0\114\315\1\267\1\315\1\267"+
    "\2\211\2\0\15\211\1\326\74\211\1\233\1\211\1\0"+
    "\1\211\1\0\2\211\2\0\22\211\1\316\67\211\1\233"+
    "\1\211\1\0\1\211\67\0\1\327\144\0\1\330\54\0"+
    "\1\331\164\0\1\332\16\0\2\325\2\0\112\325\1\333"+
    "\1\325\1\0\1\325\1\0\2\211\2\0\15\211\1\334"+
    "\74\211\1\233\1\211\1\0\1\211\67\0\1\335\141\0"+
    "\1\336\113\0\1\337\24\0\2\325\2\0\112\325\1\340"+
    "\1\325\1\0\1\325\1\0\1\334\1\211\2\0\110\334"+
    "\1\341\3\334\1\267\1\334\1\267\107\0\1\342\67\0"+
    "\1\343\46\0\1\340\1\325\2\0\114\340\1\344\1\340"+
    "\1\344\1\334\1\211\2\0\110\334\1\345\3\334\1\267"+
    "\1\334\1\267\103\0\1\346\111\0\1\347\30\0\1\344"+
    "\3\0\117\344\1\345\1\350\2\0\114\345\1\267\1\345"+
    "\1\267\40\0\1\351\171\0\1\352\13\0\2\350\2\0"+
    "\112\350\1\353\1\350\1\0\1\350\73\0\1\354\122\0"+
    "\1\355\30\0\2\350\2\0\112\350\1\356\1\350\1\0"+
    "\1\350\112\0\1\357\114\0\1\360\17\0\1\361\1\350"+
    "\2\0\73\361\1\362\16\361\1\356\1\361\1\344\1\361"+
    "\1\344\72\0\1\363\140\0\1\364\12\0\1\361\1\350"+
    "\2\0\112\361\1\365\1\361\1\344\1\361\1\344\1\361"+
    "\1\350\2\0\105\361\1\366\4\361\1\365\1\361\1\344"+
    "\1\361\1\344\66\0\1\367\122\0\1\370\34\0\1\361"+
    "\1\350\2\0\112\361\1\356\1\361\1\344\1\361\1\344"+
    "\1\361\1\350\2\0\105\361\1\371\4\361\1\365\1\361"+
    "\1\344\1\361\1\344\1\361\1\350\2\0\102\361\1\372"+
    "\7\361\1\365\1\361\1\344\1\361\1\344\1\361\1\350"+
    "\2\0\22\361\1\373\61\361\1\374\5\361\1\365\1\361"+
    "\1\344\1\361\1\344\1\361\1\350\2\0\15\361\1\375"+
    "\74\361\1\365\1\361\1\344\1\361\1\344\1\361\1\350"+
    "\2\0\22\361\1\373\67\361\1\365\1\361\1\344\1\361"+
    "\1\344\1\361\1\350\2\0\15\361\1\345\74\361\1\365"+
    "\1\361\1\344\1\361\1\344";

  private static int [] zzUnpacktrans() {
    int [] result = new int[17347];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\2\1\6\11\1\1\1\11"+
    "\1\1\2\11\1\1\2\11\1\1\1\11\1\1\2\11"+
    "\15\1\3\11\5\1\3\11\1\0\1\1\1\0\3\1"+
    "\1\0\1\1\1\0\2\11\20\1\11\0\2\1\1\0"+
    "\1\11\15\1\11\0\1\11\2\1\2\0\7\1\11\0"+
    "\2\1\2\0\2\1\1\0\2\1\12\0\1\1\1\11"+
    "\3\0\1\11\1\0\2\1\25\0\1\1\12\0\1\1"+
    "\1\0\1\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\1\3\0\1\11\5\0\1\11\4\0\1\1"+
    "\1\11\2\0\2\1\2\0\2\1\10\0\1\1\2\0"+
    "\2\1\2\0\2\1\2\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  HurlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return HurlTypes.ANY;
            }
          // fall through
          case 57: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 58: break;
          case 3:
            { return HurlTypes.NEW_LINE;
            }
          // fall through
          case 59: break;
          case 4:
            { return HurlTypes.BANG;
            }
          // fall through
          case 60: break;
          case 5:
            { return HurlTypes.QUOTE;
            }
          // fall through
          case 61: break;
          case 6:
            { return HurlTypes.COMMENT;
            }
          // fall through
          case 62: break;
          case 7:
            { return HurlTypes.DOLLAR;
            }
          // fall through
          case 63: break;
          case 8:
            { return HurlTypes.PERCENT;
            }
          // fall through
          case 64: break;
          case 9:
            { return HurlTypes.AMPERSAND;
            }
          // fall through
          case 65: break;
          case 10:
            { return HurlTypes.LPAR;
            }
          // fall through
          case 66: break;
          case 11:
            { return HurlTypes.RPAR;
            }
          // fall through
          case 67: break;
          case 12:
            { return HurlTypes.STAR;
            }
          // fall through
          case 68: break;
          case 13:
            { return HurlTypes.PLUS;
            }
          // fall through
          case 69: break;
          case 14:
            { return HurlTypes.COMMA;
            }
          // fall through
          case 70: break;
          case 15:
            { return HurlTypes.DASH;
            }
          // fall through
          case 71: break;
          case 16:
            { return HurlTypes.DOT;
            }
          // fall through
          case 72: break;
          case 17:
            { return HurlTypes.SLASH;
            }
          // fall through
          case 73: break;
          case 18:
            { return HurlTypes.NUMBER;
            }
          // fall through
          case 74: break;
          case 19:
            { return HurlTypes.COLON;
            }
          // fall through
          case 75: break;
          case 20:
            { return HurlTypes.SEMI;
            }
          // fall through
          case 76: break;
          case 21:
            { return HurlTypes.LESS;
            }
          // fall through
          case 77: break;
          case 22:
            { return HurlTypes.EQ;
            }
          // fall through
          case 78: break;
          case 23:
            { return HurlTypes.GREATER;
            }
          // fall through
          case 79: break;
          case 24:
            { return HurlTypes.QMARK;
            }
          // fall through
          case 80: break;
          case 25:
            { return HurlTypes.AT;
            }
          // fall through
          case 81: break;
          case 26:
            { return HurlTypes.ALPHANUM;
            }
          // fall through
          case 82: break;
          case 27:
            { return HurlTypes.LBRACKET;
            }
          // fall through
          case 83: break;
          case 28:
            { return HurlTypes.BACKSLASH;
            }
          // fall through
          case 84: break;
          case 29:
            { return HurlTypes.RBRACKET;
            }
          // fall through
          case 85: break;
          case 30:
            { return HurlTypes.CARET;
            }
          // fall through
          case 86: break;
          case 31:
            { return HurlTypes.UNDERSCORE;
            }
          // fall through
          case 87: break;
          case 32:
            { return HurlTypes.BACKQUOTE;
            }
          // fall through
          case 88: break;
          case 33:
            { return HurlTypes.LBRACE;
            }
          // fall through
          case 89: break;
          case 34:
            { return HurlTypes.PIPE;
            }
          // fall through
          case 90: break;
          case 35:
            { return HurlTypes.RBRACE;
            }
          // fall through
          case 91: break;
          case 36:
            { return HurlTypes.TILDE;
            }
          // fall through
          case 92: break;
          case 37:
            { return HurlTypes.STRING;
            }
          // fall through
          case 93: break;
          case 38:
            { return HurlTypes.IDENTIFIER;
            }
          // fall through
          case 94: break;
          case 39:
            { return HurlTypes.LESS_OR_EQUAL;
            }
          // fall through
          case 95: break;
          case 40:
            { return HurlTypes.GREATER_OR_EQUAL;
            }
          // fall through
          case 96: break;
          case 41:
            { return HurlTypes.JSON_ID;
            }
          // fall through
          case 97: break;
          case 42:
            { return HurlTypes.METHOD;
            }
          // fall through
          case 98: break;
          case 43:
            { return HurlTypes.BACKQUOTE_3;
            }
          // fall through
          case 99: break;
          case 44:
            { return HurlTypes.HTTP_VERSION;
            }
          // fall through
          case 100: break;
          case 45:
            { return HurlTypes.NULL;
            }
          // fall through
          case 101: break;
          case 46:
            { return HurlTypes.TEMPLATE;
            }
          // fall through
          case 102: break;
          case 47:
            { return HurlTypes.URL;
            }
          // fall through
          case 103: break;
          case 48:
            { return HurlTypes.S_ASSERTS;
            }
          // fall through
          case 104: break;
          case 49:
            { return HurlTypes.S_COOKIES;
            }
          // fall through
          case 105: break;
          case 50:
            { return HurlTypes.S_HEADERS;
            }
          // fall through
          case 106: break;
          case 51:
            { return HurlTypes.S_OPTIONS;
            }
          // fall through
          case 107: break;
          case 52:
            { return HurlTypes.S_CAPTURES;
            }
          // fall through
          case 108: break;
          case 53:
            { return HurlTypes.S_BASIC_AUTH;
            }
          // fall through
          case 109: break;
          case 54:
            { return HurlTypes.S_FORM_PARAMS;
            }
          // fall through
          case 110: break;
          case 55:
            { return HurlTypes.S_MULTIPART_FORM_DATA;
            }
          // fall through
          case 111: break;
          case 56:
            { return HurlTypes.S_QUERY_STRING_PARAMS;
            }
          // fall through
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
