// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Hurl.flex

package com.github.jazzytomato.hurl.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.github.jazzytomato.hurl.language.psi.HurlTypes;
import com.intellij.psi.TokenType;


class HurlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u1f00\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u0100\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u1f00\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00"+
    "\1\u4f00\1\u1f00\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100"+
    "\1\u5300\17\u1f00\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600"+
    "\2\u1f00\1\u5700\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00"+
    "\1\u0100\1\u5b00\1\u5c00\11\u1f00\1\u5d00\27\u1f00\1\u5e00\1\u5f00"+
    "\1\u6000\1\u6100\11\u1f00\1\u6200\1\u6300\5\u1f00\1\u6400\1\u6500"+
    "\4\u1f00\1\u6600\21\u1f00\246\u0100\1\u6700\20\u0100\1\u6800\1\u6900"+
    "\25\u0100\1\u6a00\34\u0100\1\u6b00\14\u1f00\2\u0100\1\u6c00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\0\1\3\1\4"+
    "\7\0\1\5\1\6\1\5\1\0\1\7\12\10\1\11"+
    "\6\0\1\12\1\13\1\14\1\15\1\16\1\13\1\17"+
    "\1\20\1\21\2\13\1\22\1\13\1\23\1\24\1\25"+
    "\2\13\1\26\1\27\1\30\5\13\1\31\1\32\1\33"+
    "\1\0\1\13\1\0\1\34\3\13\1\35\1\36\1\13"+
    "\1\37\3\13\1\40\1\13\1\41\1\13\1\42\1\13"+
    "\1\43\1\44\1\45\1\46\5\13\1\47\1\50\1\51"+
    "\7\0\1\52\32\0\1\53\11\0\1\54\12\0\1\54"+
    "\4\0\1\54\5\0\27\54\1\0\37\54\1\0\u01ca\54"+
    "\4\0\14\54\16\0\5\54\7\0\1\54\1\0\1\54"+
    "\201\0\5\54\1\0\2\54\2\0\4\54\1\0\1\54"+
    "\6\0\1\54\1\0\3\54\1\0\1\54\1\0\24\54"+
    "\1\0\123\54\1\0\213\54\10\0\246\54\1\0\46\54"+
    "\2\0\1\54\6\0\51\54\107\0\33\54\4\0\4\54"+
    "\55\0\53\54\25\0\12\55\4\0\2\54\1\0\143\54"+
    "\1\0\1\54\17\0\2\54\7\0\2\54\12\55\3\54"+
    "\2\0\1\54\20\0\1\54\1\0\36\54\35\0\131\54"+
    "\13\0\1\54\16\0\12\55\41\54\11\0\2\54\4\0"+
    "\1\54\5\0\26\54\4\0\1\54\11\0\1\54\3\0"+
    "\1\54\27\0\31\54\7\0\13\54\65\0\25\54\1\0"+
    "\10\54\106\0\66\54\3\0\1\54\22\0\1\54\7\0"+
    "\12\54\4\0\12\55\1\0\20\54\4\0\10\54\2\0"+
    "\2\54\2\0\26\54\1\0\7\54\1\0\1\54\3\0"+
    "\4\54\3\0\1\54\20\0\1\54\15\0\2\54\1\0"+
    "\3\54\4\0\12\55\2\54\12\0\1\54\10\0\6\54"+
    "\4\0\2\54\2\0\26\54\1\0\7\54\1\0\2\54"+
    "\1\0\2\54\1\0\2\54\37\0\4\54\1\0\1\54"+
    "\7\0\12\55\2\0\3\54\20\0\11\54\1\0\3\54"+
    "\1\0\26\54\1\0\7\54\1\0\2\54\1\0\5\54"+
    "\3\0\1\54\22\0\1\54\17\0\2\54\4\0\12\55"+
    "\11\0\1\54\13\0\10\54\2\0\2\54\2\0\26\54"+
    "\1\0\7\54\1\0\2\54\1\0\5\54\3\0\1\54"+
    "\36\0\2\54\1\0\3\54\4\0\12\55\1\0\1\54"+
    "\21\0\1\54\1\0\6\54\3\0\3\54\1\0\4\54"+
    "\3\0\2\54\1\0\1\54\1\0\2\54\3\0\2\54"+
    "\3\0\3\54\3\0\14\54\26\0\1\54\25\0\12\55"+
    "\25\0\10\54\1\0\3\54\1\0\27\54\1\0\20\54"+
    "\3\0\1\54\32\0\3\54\5\0\2\54\4\0\12\55"+
    "\20\0\1\54\4\0\10\54\1\0\3\54\1\0\27\54"+
    "\1\0\12\54\1\0\5\54\3\0\1\54\40\0\1\54"+
    "\1\0\2\54\4\0\12\55\1\0\2\54\22\0\10\54"+
    "\1\0\3\54\1\0\51\54\2\0\1\54\20\0\1\54"+
    "\5\0\3\54\10\0\3\54\4\0\12\55\12\0\6\54"+
    "\5\0\22\54\3\0\30\54\1\0\11\54\1\0\1\54"+
    "\2\0\7\54\37\0\12\55\21\0\60\54\1\0\2\54"+
    "\14\0\7\54\11\0\12\55\47\0\2\54\1\0\1\54"+
    "\1\0\5\54\1\0\30\54\1\0\1\54\1\0\12\54"+
    "\1\0\2\54\11\0\1\54\2\0\5\54\1\0\1\54"+
    "\11\0\12\55\2\0\4\54\40\0\1\54\37\0\12\55"+
    "\26\0\10\54\1\0\44\54\33\0\5\54\163\0\53\54"+
    "\24\0\1\54\12\55\6\0\6\54\4\0\4\54\3\0"+
    "\1\54\3\0\2\54\7\0\3\54\4\0\15\54\14\0"+
    "\1\54\1\0\12\55\6\0\46\54\1\0\1\54\5\0"+
    "\1\54\2\0\53\54\1\0\115\54\1\0\4\54\2\0"+
    "\7\54\1\0\1\54\1\0\4\54\2\0\51\54\1\0"+
    "\4\54\2\0\41\54\1\0\4\54\2\0\7\54\1\0"+
    "\1\54\1\0\4\54\2\0\17\54\1\0\71\54\1\0"+
    "\4\54\2\0\103\54\45\0\20\54\20\0\126\54\2\0"+
    "\6\54\3\0\u016c\54\2\0\21\54\1\53\32\54\5\0"+
    "\113\54\6\0\10\54\7\0\15\54\1\0\4\54\16\0"+
    "\22\54\16\0\22\54\16\0\15\54\1\0\3\54\17\0"+
    "\64\54\43\0\1\54\4\0\1\54\3\0\12\55\46\0"+
    "\12\55\6\0\131\54\7\0\5\54\2\0\42\54\1\0"+
    "\1\54\5\0\106\54\12\0\37\54\47\0\12\55\36\54"+
    "\2\0\5\54\13\0\54\54\4\0\32\54\6\0\12\55"+
    "\46\0\27\54\11\0\65\54\53\0\12\55\6\0\12\55"+
    "\15\0\1\54\135\0\57\54\21\0\7\54\4\0\12\55"+
    "\51\0\36\54\15\0\2\54\12\55\54\54\32\0\44\54"+
    "\34\0\12\55\3\0\3\54\12\55\44\54\2\0\11\54"+
    "\7\0\53\54\2\0\3\54\51\0\4\54\1\0\6\54"+
    "\1\0\2\54\3\0\1\54\5\0\300\54\100\0\26\54"+
    "\2\0\6\54\2\0\46\54\2\0\6\54\2\0\10\54"+
    "\1\0\1\54\1\0\1\54\1\0\1\54\1\0\37\54"+
    "\2\0\65\54\1\0\7\54\1\0\1\54\3\0\3\54"+
    "\1\0\7\54\3\0\4\54\2\0\6\54\4\0\15\54"+
    "\5\0\3\54\1\0\7\54\3\0\13\53\35\0\2\52"+
    "\5\0\1\53\57\0\1\53\21\0\1\54\15\0\1\54"+
    "\20\0\15\54\145\0\1\54\4\0\1\54\2\0\12\54"+
    "\1\0\1\54\3\0\5\54\6\0\1\54\1\0\1\54"+
    "\1\0\1\54\1\0\4\54\1\0\13\54\2\0\4\54"+
    "\5\0\5\54\4\0\1\54\64\0\2\54\u017b\0\57\54"+
    "\1\0\57\54\1\0\205\54\6\0\4\54\3\0\2\54"+
    "\14\0\46\54\1\0\1\54\5\0\1\54\2\0\70\54"+
    "\7\0\1\54\20\0\27\54\11\0\7\54\1\0\7\54"+
    "\1\0\7\54\1\0\7\54\1\0\7\54\1\0\7\54"+
    "\1\0\7\54\1\0\7\54\120\0\1\54\320\0\1\53"+
    "\4\0\2\54\52\0\5\54\5\0\2\54\4\0\126\54"+
    "\6\0\3\54\1\0\132\54\1\0\4\54\5\0\53\54"+
    "\1\0\136\54\21\0\33\54\65\0\306\54\112\0\360\54"+
    "\20\0\215\54\103\0\56\54\2\0\15\54\3\0\20\54"+
    "\12\55\2\54\24\0\57\54\20\0\37\54\2\0\106\54"+
    "\61\0\11\54\2\0\147\54\2\0\65\54\2\0\5\54"+
    "\60\0\13\54\1\0\3\54\1\0\4\54\1\0\27\54"+
    "\35\0\64\54\16\0\62\54\34\0\12\55\30\0\6\54"+
    "\3\0\1\54\1\0\2\54\1\0\12\55\34\54\12\0"+
    "\27\54\31\0\35\54\7\0\57\54\34\0\1\54\12\55"+
    "\6\0\5\54\1\0\12\54\12\55\5\54\1\0\51\54"+
    "\27\0\3\54\1\0\10\54\4\0\12\55\6\0\27\54"+
    "\3\0\1\54\3\0\62\54\1\0\1\54\3\0\2\54"+
    "\2\0\5\54\2\0\1\54\1\0\1\54\30\0\3\54"+
    "\2\0\13\54\7\0\3\54\14\0\6\54\2\0\6\54"+
    "\2\0\6\54\11\0\7\54\1\0\7\54\1\0\53\54"+
    "\1\0\14\54\10\0\163\54\15\0\12\55\6\0\244\54"+
    "\14\0\27\54\4\0\61\54\4\0\u0100\56\156\54\2\0"+
    "\152\54\46\0\7\54\14\0\5\54\5\0\1\54\1\0"+
    "\12\54\1\0\15\54\1\0\5\54\1\0\1\54\1\0"+
    "\2\54\1\0\2\54\1\0\154\54\41\0\153\54\22\0"+
    "\100\54\2\0\66\54\50\0\14\54\164\0\5\54\1\0"+
    "\207\54\23\0\12\55\7\0\32\54\6\0\32\54\13\0"+
    "\131\54\3\0\6\54\2\0\6\54\2\0\6\54\2\0"+
    "\3\54\43\0\14\54\1\0\32\54\1\0\23\54\1\0"+
    "\2\54\1\0\17\54\2\0\16\54\42\0\173\54\205\0"+
    "\35\54\3\0\61\54\57\0\40\54\15\0\24\54\1\0"+
    "\10\54\6\0\46\54\12\0\36\54\2\0\44\54\4\0"+
    "\10\54\60\0\236\54\2\0\12\55\6\0\44\54\4\0"+
    "\44\54\4\0\50\54\10\0\64\54\234\0\67\54\11\0"+
    "\26\54\12\0\10\54\230\0\6\54\2\0\1\54\1\0"+
    "\54\54\1\0\2\54\3\0\1\54\2\0\27\54\12\0"+
    "\27\54\11\0\37\54\101\0\23\54\1\0\2\54\12\0"+
    "\26\54\12\0\32\54\106\0\70\54\6\0\2\54\100\0"+
    "\1\54\17\0\4\54\1\0\3\54\1\0\35\54\52\0"+
    "\35\54\3\0\35\54\43\0\10\54\1\0\34\54\33\0"+
    "\66\54\12\0\26\54\12\0\23\54\15\0\22\54\156\0"+
    "\111\54\67\0\63\54\15\0\63\54\15\0\44\54\14\0"+
    "\12\55\306\0\35\54\12\0\1\54\10\0\26\54\232\0"+
    "\27\54\14\0\65\54\56\0\12\55\23\0\55\54\40\0"+
    "\31\54\7\0\12\55\11\0\44\54\17\0\12\55\4\0"+
    "\1\54\13\0\43\54\3\0\1\54\14\0\60\54\16\0"+
    "\4\54\13\0\12\55\1\54\1\0\1\54\43\0\22\54"+
    "\1\0\31\54\124\0\7\54\1\0\1\54\1\0\4\54"+
    "\1\0\17\54\1\0\12\54\7\0\57\54\21\0\12\55"+
    "\13\0\10\54\2\0\2\54\2\0\26\54\1\0\7\54"+
    "\1\0\2\54\1\0\5\54\3\0\1\54\22\0\1\54"+
    "\14\0\5\54\236\0\65\54\22\0\4\54\5\0\12\55"+
    "\5\0\1\54\40\0\60\54\24\0\2\54\1\0\1\54"+
    "\10\0\12\55\246\0\57\54\51\0\4\54\44\0\60\54"+
    "\24\0\1\54\13\0\12\55\46\0\53\54\15\0\1\54"+
    "\7\0\12\55\66\0\33\54\25\0\12\55\306\0\54\54"+
    "\164\0\100\54\12\55\25\0\1\54\240\0\10\54\2\0"+
    "\47\54\20\0\1\54\1\0\1\54\34\0\1\54\12\0"+
    "\50\54\7\0\1\54\25\0\1\54\13\0\56\54\23\0"+
    "\1\54\42\0\71\54\7\0\11\54\1\0\45\54\21\0"+
    "\1\54\17\0\12\55\30\0\36\54\160\0\7\54\1\0"+
    "\2\54\1\0\46\54\25\0\1\54\11\0\12\55\6\0"+
    "\6\54\1\0\2\54\1\0\40\54\16\0\1\54\7\0"+
    "\12\55\u0136\0\23\54\15\0\232\54\346\0\304\54\274\0"+
    "\57\54\321\0\107\54\271\0\71\54\7\0\37\54\1\0"+
    "\12\55\146\0\36\54\22\0\60\54\20\0\4\54\14\0"+
    "\12\55\11\0\25\54\5\0\23\54\260\0\100\54\200\0"+
    "\113\54\5\0\1\54\102\0\15\54\100\0\2\54\1\0"+
    "\1\54\34\0\370\54\10\0\363\54\15\0\37\54\61\0"+
    "\3\54\21\0\4\54\10\0\u018c\54\4\0\153\54\5\0"+
    "\15\54\3\0\11\54\7\0\12\54\146\0\125\54\1\0"+
    "\107\54\1\0\2\54\2\0\1\54\2\0\2\54\2\0"+
    "\4\54\1\0\14\54\1\0\1\54\1\0\7\54\1\0"+
    "\101\54\1\0\4\54\2\0\10\54\1\0\7\54\1\0"+
    "\34\54\1\0\4\54\1\0\5\54\1\0\1\54\3\0"+
    "\7\54\1\0\u0154\54\2\0\31\54\1\0\31\54\1\0"+
    "\37\54\1\0\31\54\1\0\37\54\1\0\31\54\1\0"+
    "\37\54\1\0\31\54\1\0\37\54\1\0\31\54\1\0"+
    "\10\54\2\0\62\55\55\54\12\0\7\54\2\0\12\55"+
    "\4\0\1\54\u0171\0\54\54\4\0\12\55\6\0\305\54"+
    "\73\0\104\54\7\0\1\54\4\0\12\55\246\0\4\54"+
    "\1\0\33\54\1\0\2\54\1\0\1\54\2\0\1\54"+
    "\1\0\12\54\1\0\4\54\1\0\1\54\1\0\1\54"+
    "\6\0\1\54\4\0\1\54\1\0\1\54\1\0\1\54"+
    "\1\0\3\54\1\0\2\54\1\0\1\54\2\0\1\54"+
    "\1\0\1\54\1\0\1\54\1\0\1\54\1\0\1\54"+
    "\1\0\2\54\1\0\1\54\2\0\4\54\1\0\7\54"+
    "\1\0\4\54\1\0\4\54\1\0\1\54\1\0\12\54"+
    "\1\0\21\54\5\0\3\54\1\0\5\54\1\0\21\54"+
    "\104\0\327\54\51\0\65\54\13\0\336\54\2\0\u0182\54"+
    "\16\0\u0131\54\37\0\36\54\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\2\1\4\1\1\1\5\1\1"+
    "\1\6\6\7\1\10\1\11\3\7\1\12\1\13\1\14"+
    "\1\0\1\15\1\0\12\7\1\16\12\7\1\17\3\7"+
    "\1\0\1\7\1\0\1\7\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\2\0\1\21\1\0\2\20";

  private static int [] zzUnpackAction() {
    int [] result = new int[68];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\57\0\u011a"+
    "\0\57\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\57"+
    "\0\57\0\u0263\0\u0292\0\u02c1\0\57\0\57\0\u02f0\0\215"+
    "\0\57\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a\0\u0439"+
    "\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0149\0\u0524\0\u0553\0\u0582"+
    "\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb\0\u0149"+
    "\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843"+
    "\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c\0\u09bb"+
    "\0\57\0\u09ea\0\u0a19\0\u0a48";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[68];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\3\12\1\13\1\12\1\14\1\15\3\12\1\16"+
    "\1\17\3\12\1\20\1\2\1\21\3\12\1\22\1\12"+
    "\1\23\3\12\1\24\1\12\1\25\1\2\1\26\2\3"+
    "\1\27\1\6\1\2\60\0\2\3\47\0\2\3\3\0"+
    "\3\30\1\31\26\30\1\32\24\30\2\5\1\0\47\5"+
    "\1\0\3\5\11\0\1\6\44\0\1\6\11\0\1\10"+
    "\1\0\17\12\3\0\13\12\6\0\1\6\11\0\1\12"+
    "\1\0\17\12\3\0\13\12\20\0\1\12\1\0\4\12"+
    "\1\33\12\12\3\0\13\12\20\0\1\12\1\0\4\12"+
    "\1\34\12\12\3\0\13\12\20\0\1\12\1\0\4\12"+
    "\1\35\12\12\3\0\13\12\20\0\1\12\1\0\13\12"+
    "\1\36\3\12\3\0\13\12\20\0\1\12\1\0\1\37"+
    "\11\12\1\40\3\12\1\34\3\0\13\12\20\0\1\12"+
    "\1\0\17\12\3\0\11\12\1\41\1\12\20\0\1\12"+
    "\1\0\17\12\3\0\12\12\1\42\20\0\1\12\1\0"+
    "\17\12\3\0\7\12\1\43\3\12\20\0\1\27\1\0"+
    "\17\27\3\0\13\27\10\0\2\30\1\0\47\30\1\0"+
    "\3\30\11\0\1\12\1\0\10\12\1\44\6\12\3\0"+
    "\13\12\20\0\1\12\1\0\15\12\1\45\1\12\3\0"+
    "\13\12\20\0\1\12\1\0\1\46\16\12\3\0\13\12"+
    "\20\0\1\12\1\0\15\12\1\47\1\12\3\0\13\12"+
    "\20\0\1\12\1\0\15\12\1\50\1\12\3\0\13\12"+
    "\20\0\1\12\1\0\14\12\1\34\2\12\3\0\13\12"+
    "\20\0\1\12\1\0\17\12\3\0\11\12\1\51\1\12"+
    "\20\0\1\12\1\0\17\12\3\0\4\12\1\52\6\12"+
    "\20\0\1\12\1\0\17\12\3\0\12\12\1\53\20\0"+
    "\1\12\1\0\4\12\1\54\12\12\3\0\13\12\20\0"+
    "\1\12\1\0\3\12\1\45\13\12\3\0\13\12\20\0"+
    "\1\12\1\0\7\12\1\55\7\12\3\0\13\12\20\0"+
    "\1\12\1\0\2\12\1\56\14\12\3\0\13\12\20\0"+
    "\1\12\1\0\17\12\3\0\6\12\1\57\4\12\20\0"+
    "\1\12\1\0\17\12\3\0\4\12\1\60\6\12\20\0"+
    "\1\12\1\0\17\12\3\0\1\12\1\61\11\12\20\0"+
    "\1\12\1\0\15\12\1\62\1\12\3\0\13\12\20\0"+
    "\1\12\1\0\12\12\1\63\4\12\3\0\13\12\20\0"+
    "\1\12\1\0\6\12\1\45\10\12\3\0\13\12\20\0"+
    "\1\12\1\64\17\12\3\0\10\12\1\65\2\12\20\0"+
    "\1\12\1\0\17\12\3\0\13\12\1\0\1\66\16\0"+
    "\1\12\1\0\4\12\1\45\12\12\3\0\13\12\20\0"+
    "\1\12\1\0\11\12\1\67\5\12\3\0\13\12\17\0"+
    "\1\70\57\0\1\12\1\64\17\12\3\0\13\12\46\0"+
    "\1\71\30\0\1\12\1\0\14\12\1\45\2\12\3\0"+
    "\13\12\17\0\1\72\103\0\1\73\22\0\1\72\2\0"+
    "\44\72\1\74\7\72\40\0\1\75\16\0\1\72\2\0"+
    "\44\72\1\76\7\72\44\0\1\77\12\0\1\76\1\100"+
    "\1\0\47\76\1\72\3\76\1\72\35\0\1\101\21\0"+
    "\2\100\1\0\46\100\1\102\1\0\3\100\1\0\2\100"+
    "\1\0\46\100\1\103\1\0\3\100\1\0\1\103\1\100"+
    "\1\0\47\103\1\104\3\103\2\104\2\0\54\104";

  private static int [] zzUnpacktrans() {
    int [] result = new int[2679];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\4\1\1\11\1\1\1\11\6\1\2\11"+
    "\3\1\2\11\1\1\1\0\1\11\1\0\31\1\1\0"+
    "\1\1\1\0\1\1\2\0\1\1\1\0\1\1\1\0"+
    "\1\1\2\0\1\11\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[68];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  HurlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return HurlTypes.NUMBER;
            }
          // fall through
          case 18: break;
          case 2:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 19: break;
          case 3:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 20: break;
          case 4:
            { return HurlTypes.COMMENT;
            }
          // fall through
          case 21: break;
          case 5:
            { return HurlTypes.COMMA;
            }
          // fall through
          case 22: break;
          case 6:
            { return HurlTypes.COLON;
            }
          // fall through
          case 23: break;
          case 7:
            { return HurlTypes.IDENTIFIER;
            }
          // fall through
          case 24: break;
          case 8:
            { return HurlTypes.LBRACKET;
            }
          // fall through
          case 25: break;
          case 9:
            { return HurlTypes.RBRACKET;
            }
          // fall through
          case 26: break;
          case 10:
            { return HurlTypes.LBRACE;
            }
          // fall through
          case 27: break;
          case 11:
            { return HurlTypes.RBRACE;
            }
          // fall through
          case 28: break;
          case 12:
            { return HurlTypes.JSON_ID;
            }
          // fall through
          case 29: break;
          case 13:
            { return HurlTypes.STRING;
            }
          // fall through
          case 30: break;
          case 14:
            { return HurlTypes.METHOD;
            }
          // fall through
          case 31: break;
          case 15:
            { return HurlTypes.NULL;
            }
          // fall through
          case 32: break;
          case 16:
            { return HurlTypes.URL;
            }
          // fall through
          case 33: break;
          case 17:
            { return HurlTypes.BOOLEAN;
            }
          // fall through
          case 34: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
